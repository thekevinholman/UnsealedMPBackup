<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>SCOM.UnsealedMPBackup</ID>
      <Version>1.0.0.1</Version>
    </Identity>
    <Name>SCOM.UnsealedMPBackup</Name>
    <References>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <SecureReferences>
      <SecureReference ID="SCOM.UnsealedMPBackup.RunAsProfile" Accessibility="Internal" Context="System!System.Entity" />
    </SecureReferences>
    <ModuleTypes>
      <WriteActionModuleType ID="SCOM.UnsealedMPBackup.Script.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="BackupDir" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="DaysToKeep" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="BackupDir" Selector="$Config/BackupDir$" ParameterType="string" />
          <OverrideableParameter ID="DaysToKeep" Selector="$Config/DaysToKeep$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>SCOM.UnsealedMPBackup.Script.WA.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Unsealed MP backup
#
#  Kevin Holman
#  v1.2
#=================================================================================
param ($MGName, $BackupDir, $DaysToKeep) 


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $MGName = "SCOM"
# $BackupDir = "\\SERVER\SHARE\MPBackup"
# $DaysToKeep = "14"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging
$ScriptName = "SCOM.UnsealedMPBackup.Script.WA.ps1"
$EventID = "9876"
#=================================================================================


# Starting Script section
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# I have found this to be the most reliable method to load SCOM modules for scripts running on Management Servers
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Unable to load OperationsManager module or unable to connect to Management Server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================	


# Begin MAIN script section
#=================================================================================
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Path is ($BackupDir). `n Days to keep is ($DaysToKeep).")

# Test to ensure we can access the BackupDir
IF (!(test-path $BackupDir))
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR:  The Backup Directory Path is not available. `n BackupDir tested: ($BackupDir). `n Ensure the path is available and the account this script runs under has access. `n Terminating script.")
  EXIT
}

# Add a directory for the Management Group Name
$BackupPath = "$BackupDir\$MGName"

# Make the directory if it does not exist
IF (!(test-path $BackupPath))
{
  mkdir $BackupPath
}

# Test to ensure we can access the BackupPath Now
IF (!(test-path $BackupPath))
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR:  The Backup Directory Path is not available. `n Backup Path tested: ($BackupPath). `n Ensure the path is available and the account this script runs under has access. `n Terminating script.")
  EXIT
}

#Get the date
$date = get-date -format M.d.yyyy

#Make the directory for today if it does not already exist
IF (!(test-path $backupPath\$date))
{
  mkdir  $BackupPath\$date
}

#Export the MPs  
Get-SCOMManagementpack | where {$_.Sealed -eq $false} | Export-SCOMManagementPack -Path:$backupPath\$date

#Get the folders in the directory
$folders = dir $backupPath

$old = [System.DateTime]::Now
$old = $old.AddDays("-"+$DaysToKeep)

#Delete folders past the days to keep param
FOREACH ($folder in $folders)
{
  if($folder.CreationTime -lt $old)
  {
	Remove-Item $folder.FullName -recurse	
  }
}

# Check for any errors and log them
IF ($Error)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n ERRORS Detected:  There was one or more errors while running the script. `n Error is: ($Error).")
}
#=================================================================================
# End MAIN script section

  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <Parameters>
			      <Parameter>
                    <Name>MGName</Name>
                    <Value>$Target/ManagementGroup/Name$</Value>
                  </Parameter>				
                  <Parameter>
                    <Name>BackupDir</Name>
                    <Value>$Config/BackupDir$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>DaysToKeep</Name>
                    <Value>$Config/DaysToKeep$</Value>
                  </Parameter>				  
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="SCOM.UnsealedMPBackup.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Maintenance</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="System!System.Scheduler">
            <Scheduler>
              <SimpleReccuringSchedule>
                <Interval Unit="Seconds">86400</Interval>
                <SyncTime></SyncTime>
              </SimpleReccuringSchedule>
              <ExcludeDates />
            </Scheduler>
          </DataSource>
        </DataSources>	
        <WriteActions>
          <WriteAction ID="WA" TypeID="SCOM.UnsealedMPBackup.Script.WA" RunAs="SCOM.UnsealedMPBackup.RunAsProfile">
            <BackupDir>\\SERVER\SHARE\SCOM Unsealed MP Backups</BackupDir>
            <DaysToKeep>14</DaysToKeep>
            <TimeoutSeconds>300</TimeoutSeconds>			
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
  </Monitoring>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="SCOM.UnsealedMPBackup">
          <Name>SCOM Unsealed MP Backup</Name>
          <Description>This management pack exports all the unsealed MPs once a day to a folder. The folder name is the Management Group and date of the backup. Backups older than the configured number of days will be deleted.</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.UnsealedMPBackup.Rule">
          <Name>SCOM Unsealed MP Backup Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="SCOM.UnsealedMPBackup.RunAsProfile">
          <Name>SCOM Unsealed MP Backup RunAs Profile</Name>
          <Description>RunAs Profile with SCOM Administrator access to the SDK used to run the MP Backup Powershell script which will backup MPs and have rights to the disk location to export them to.</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>